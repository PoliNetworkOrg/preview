"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["934"],{5308:function(e,n,t){t.r(n),t.d(n,{default:()=>u,frontMatter:()=>a,metadata:()=>s,assets:()=>c,toc:()=>d,contentTitle:()=>o});var s=JSON.parse('{"id":"infrastructure/How To Guides/Adding a Secret","title":"Adding a Secret","description":"Secrets are stored inside a Azure Key Vault. To add a new secret, this page will","source":"@site/docs/infrastructure/03-How To Guides/Adding a Secret.md","sourceDirName":"infrastructure/03-How To Guides","slug":"/infrastructure/How To Guides/Adding a Secret","permalink":"/preview/PoliNetworkOrg/docs/branch/main/docs/infrastructure/How To Guides/Adding a Secret","draft":false,"unlisted":false,"editUrl":"https://github.com/polinetworkorg/docs/tree/main/docs/infrastructure/03-How To Guides/Adding a Secret.md","tags":[],"version":"current","frontMatter":{},"sidebar":"infra","previous":{"title":"cd","permalink":"/preview/PoliNetworkOrg/docs/branch/main/docs/infrastructure/Tutorials/pipelines/cd"}}'),r=t("6773"),i=t("6070");let a={},o="Adding a Secret",c={},d=[{value:"Basics",id:"basics",level:2},{value:"Different ways to mount your secret",id:"different-ways-to-mount-your-secret",level:2},{value:"Volume",id:"volume",level:3},{value:"Environment Variables",id:"environment-variables",level:3}];function l(e){let n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"adding-a-secret",children:"Adding a Secret"})}),"\n",(0,r.jsx)(n.p,{children:"Secrets are stored inside a Azure Key Vault. To add a new secret, this page will\nexplain how to reference the secret in k8s deployments."}),"\n",(0,r.jsx)(n.h2,{id:"basics",children:"Basics"}),"\n",(0,r.jsxs)(n.p,{children:["A secret can be added to your deployment by using a ",(0,r.jsx)(n.code,{children:"SecretProviderClass"})," object.\nThis object will automatically reference the secret stored in the Azure Key Vault."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'apiVersion: secrets-store.csi.x-k8s.io/v1\nkind: SecretProviderClass\nmetadata:\n  name: sc-demo-keyvault-csi\nspec:\n  provider: azure\n  parameters:\n    usePodIdentity: "false"\n    useVMManagedIdentity: "true"                                  # Set to true for using managed identity\n    userAssignedIdentityID: "xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx" # Set the clientID of the managed identity to use\n    tenantId: "xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"               # The tenant ID of the key vault\n    keyvaultName: "kv-polinetwork"                                # Set to the name of your key vault\n    objects: |\n      array:\n        - |\n          objectName: ExampleSecret            # keyvault secret name\n          objectType: secret\n'})}),"\n",(0,r.jsxs)(n.p,{children:["A detailed guide can be found in the ",(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/azure/aks/csi-secrets-store-identity-access?tabs=azure-portal&pivots=access-with-a-user-assigned-managed-identity",children:"official documentation"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["This maps the secret ",(0,r.jsx)(n.code,{children:"ExampleSecret"})," from the key vault ",(0,r.jsx)(n.code,{children:"kv-polinetwork"})," to a volume you can mount in your pod.\nA few things to note"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"usePodIdentity"})," should be set to ",(0,r.jsx)(n.code,{children:"false"})," and ",(0,r.jsx)(n.code,{children:"useVMManagedIdentity"})," should be set to ",(0,r.jsx)(n.code,{children:"true"})," since we are using a VM managed identity."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"userAssignedIdentityID"})," should be set to the client ID of the managed identity we linked to the key vault."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"tenantId"})," should be set to the tenant ID of our Azure tenant."]}),"\n"]}),"\n",(0,r.jsxs)(n.admonition,{type:"tip",children:[(0,r.jsx)(n.p,{children:"If you are unsure about what the clinet ID and tenant ID are, you probably aren't one of the heads of IT in PoliNetwork.\nChanges to such parts of the manifest should only be done by someone with the right permissions."}),(0,r.jsx)(n.p,{children:"Anyway here's how to get them:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Tenant ID:"}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"az account show --query tenantId --output tsv\n"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Client ID:"}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"az aks show --resource-group <resource-group> --name <cluster-name> --query addonProfiles.azureKeyvaultSecretsProvider.identity.clientId -o tsv\n"})})]}),"\n",(0,r.jsx)(n.h2,{id:"different-ways-to-mount-your-secret",children:"Different ways to mount your secret"}),"\n",(0,r.jsx)(n.h3,{id:"volume",children:"Volume"}),"\n",(0,r.jsx)(n.p,{children:"In the above example, the secret can be mounted as a volume and then read from disk in your pod like in the example below:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'kind: Pod\napiVersion: v1\nmetadata:\n  name: sc-demo-keyvault-csi\nspec:\n  containers:\n    - name: busybox\n      image: registry.k8s.io/e2e-test-images/busybox:1.29-4\n      command:\n        - "/bin/sleep"\n        - "10000"\n      volumeMounts:\n        - name: secrets-store01-inline # Name of the volume\n          mountPath: "/mnt/secrets-store" # Path where the secrets are mounted inside the pod\n          readOnly: true # A secret should be mounted as read-only\n      resources:\n        requests:\n          cpu: 100m\n          memory: 128Mi\n        limits:\n          cpu: 250m\n          memory: 256Mi\n  volumes:\n    - name: secrets-store01-inline # Name of the volume\n      csi:\n        driver: secrets-store.csi.k8s.io\n        readOnly: true\n        volumeAttributes:\n          secretProviderClass: "sc-demo-keyvault-csi" # The name of the SecretProviderClass\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Assuming this is the pod manifest you applied to the cluster, you can retrieve the secret by reading the file ",(0,r.jsx)(n.code,{children:"/mnt/secrets-store/ExampleSecret"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"kubectl exec -it sc-demo-keyvault-csi -- cat /mnt/secrets-store/ExampleSecret\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"tip",children:[(0,r.jsx)(n.p,{children:"More than one secret can be mounted at the same time by adding more entries in the array, all of them can be found in the same directory, you can see them by running:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"kubectl exec -it sc-demo-keyvault-csi -- ls /mnt/secrets-store\n"})})]}),"\n",(0,r.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,r.jsx)(n.p,{children:"You can also mount the secret as an environment variable in your pod by first\nsyncing the secret with the k8s secrets like in the example below:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"...\nspec:\n  provider: azure\n  ...\n  secretObjects:   \n    # ognuno di questi e' una COLLEZIONE di secrets\n    # si possono definire piu' collezioni separate, ma per identificare i secret Azure dagli altri k8s secrets,\n    # utilizziamo una collezione che contiene pi\xf9 secrets (come se fosse un Object appunto)\n    # importante: va creato solo la prima volta, poi basta aggiungere una key sotto\n    - secretName: azure-kv\n      type: Opaque\n      data:\n        # qui va aggiunto il secret che vogliamo esporre anche come k8s secret\n        # importante distinguere objectName (reference al KV) dalla key (nome personalizzato)\n        - objectName: ExampleSecret   # nome del secret dentro il KV di azure\n          key: example-secret         # key personalizzata del k8s secret\n"})}),"\n",(0,r.jsx)(n.p,{children:"Like before, you can then reference the secret in your pod manifest:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"...\nspec:\n  containers:\n      env:\n      # aggiungiamo l'env variable\n      - name: EXAMPLE_SECRET # nome dell'env variable (indipendente dal nome del secret)\n        valueFrom:\n          secretKeyRef:\n            name: azure-kv          # nome della collezione di k8s secret\n            key: example-secret     # key del secret specifico da utilizzare dentro la collezione\n...\n"})})]})}function u(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},6070:function(e,n,t){t.d(n,{Z:function(){return o},a:function(){return a}});var s=t(1699);let r={},i=s.createContext(r);function a(e){let n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);